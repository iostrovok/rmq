// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iostrovok/rmq (interfaces: RedisClient)

// Package mmock is a generated GoMock package.
package mmock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockRedisClient is a mock of RedisClient interface
type MockRedisClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedisClientMockRecorder
}

// MockRedisClientMockRecorder is the mock recorder for MockRedisClient
type MockRedisClientMockRecorder struct {
	mock *MockRedisClient
}

// NewMockRedisClient creates a new mock instance
func NewMockRedisClient(ctrl *gomock.Controller) *MockRedisClient {
	mock := &MockRedisClient{ctrl: ctrl}
	mock.recorder = &MockRedisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedisClient) EXPECT() *MockRedisClientMockRecorder {
	return m.recorder
}

// Del mocks base method
func (m *MockRedisClient) Del(arg0 string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Del indicates an expected call of Del
func (mr *MockRedisClientMockRecorder) Del(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRedisClient)(nil).Del), arg0)
}

// FlushDb mocks base method
func (m *MockRedisClient) FlushDb() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FlushDb")
}

// FlushDb indicates an expected call of FlushDb
func (mr *MockRedisClientMockRecorder) FlushDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDb", reflect.TypeOf((*MockRedisClient)(nil).FlushDb))
}

// LLen mocks base method
func (m *MockRedisClient) LLen(arg0 string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LLen", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LLen indicates an expected call of LLen
func (mr *MockRedisClientMockRecorder) LLen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LLen", reflect.TypeOf((*MockRedisClient)(nil).LLen), arg0)
}

// LPush mocks base method
func (m *MockRedisClient) LPush(arg0 string, arg1 ...string) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPush", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// LPush indicates an expected call of LPush
func (mr *MockRedisClientMockRecorder) LPush(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockRedisClient)(nil).LPush), varargs...)
}

// LRem mocks base method
func (m *MockRedisClient) LRem(arg0 string, arg1 int, arg2 string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRem", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LRem indicates an expected call of LRem
func (mr *MockRedisClientMockRecorder) LRem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRem", reflect.TypeOf((*MockRedisClient)(nil).LRem), arg0, arg1, arg2)
}

// LTrim mocks base method
func (m *MockRedisClient) LTrim(arg0 string, arg1, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LTrim", arg0, arg1, arg2)
}

// LTrim indicates an expected call of LTrim
func (mr *MockRedisClientMockRecorder) LTrim(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LTrim", reflect.TypeOf((*MockRedisClient)(nil).LTrim), arg0, arg1, arg2)
}

// RPopLPush mocks base method
func (m *MockRedisClient) RPopLPush(arg0, arg1 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPopLPush", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RPopLPush indicates an expected call of RPopLPush
func (mr *MockRedisClientMockRecorder) RPopLPush(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPopLPush", reflect.TypeOf((*MockRedisClient)(nil).RPopLPush), arg0, arg1)
}

// SAdd mocks base method
func (m *MockRedisClient) SAdd(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SAdd", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SAdd indicates an expected call of SAdd
func (mr *MockRedisClientMockRecorder) SAdd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockRedisClient)(nil).SAdd), arg0, arg1)
}

// SMembers mocks base method
func (m *MockRedisClient) SMembers(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembers", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// SMembers indicates an expected call of SMembers
func (mr *MockRedisClientMockRecorder) SMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembers", reflect.TypeOf((*MockRedisClient)(nil).SMembers), arg0)
}

// SRem mocks base method
func (m *MockRedisClient) SRem(arg0, arg1 string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRem", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SRem indicates an expected call of SRem
func (mr *MockRedisClientMockRecorder) SRem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRem", reflect.TypeOf((*MockRedisClient)(nil).SRem), arg0, arg1)
}

// Set mocks base method
func (m *MockRedisClient) Set(arg0, arg1 string, arg2 time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockRedisClientMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisClient)(nil).Set), arg0, arg1, arg2)
}

// TTL mocks base method
func (m *MockRedisClient) TTL(arg0 string) (time.Duration, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", arg0)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// TTL indicates an expected call of TTL
func (mr *MockRedisClientMockRecorder) TTL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockRedisClient)(nil).TTL), arg0)
}
